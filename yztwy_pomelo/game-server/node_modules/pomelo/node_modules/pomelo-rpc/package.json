{
  "name": "pomelo-rpc",
  "version": "0.4.10",
  "dependencies": {
    "socket.io": "0.9.16",
    "crc": "0.2.0",
    "socket.io-client": "0.9.16",
    "pomelo-loader": "0.0.6",
    "stream-pkg": "0.0.5",
    "pomelo-logger": "0.1.7",
    "node-uuid": "1.4.0",
    "async": "0.2.10"
  },
  "devDependencies": {
    "mocha": ">=0.0.1",
    "should": ">=0.0.1"
  },
  "contributors": [
    {
      "name": "* Yongchang Zhou",
      "email": "changchang005@gmail.com"
    }
  ],
  "gitHead": "b959102f0290729338436ebc364ad327280bc5cc",
  "description": "pomelo-rpc is the low level RPC framework for pomelo project. It contains two parts: client and server.",
  "_id": "pomelo-rpc@0.4.10",
  "scripts": {},
  "_shasum": "b790d2468015d319807ca70381ea75fa0fb3ed71",
  "_from": "pomelo-rpc@0.4.10",
  "_npmVersion": "2.5.0",
  "_nodeVersion": "0.10.28",
  "_npmUser": {
    "name": "fantasyni",
    "email": "fantasyni@163.com"
  },
  "maintainers": [
    {
      "name": "changchang",
      "email": "changchang005@gmail.com"
    },
    {
      "name": "changchang005",
      "email": "changchang005@gmail.com"
    },
    {
      "name": "demon",
      "email": "zhang0925@126.com"
    },
    {
      "name": "fantasyni",
      "email": "nizhenyang@qq.com"
    },
    {
      "name": "py8765",
      "email": "pengyang633@126.com"
    },
    {
      "name": "xieccy",
      "email": "xieccy@gmail.com"
    }
  ],
  "dist": {
    "shasum": "b790d2468015d319807ca70381ea75fa0fb3ed71",
    "size": 36949,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/pomelo-rpc/download/pomelo-rpc-0.4.10.tgz"
  },
  "directories": {},
  "publish_time": 1433485750589,
  "_cnpm_publish_time": 1433485750589,
  "_resolved": "https://registry.npm.taobao.org/pomelo-rpc/download/pomelo-rpc-0.4.10.tgz",
  "readme": "#pomelo-rpc - rpc framework for pomelo\n\npomelo-rpc is the low level RPC framework for pomelo project. It contains two parts: client and server.\n\nThe client part generates the RPC client proxy, routes the message to the appropriate remote server and manages the network communications. Support add proxies and remote server information dynamically.\n\nThe server part exports the remote services, dispatches the remote requests to the services and also manages the network communications.\n\nAnd the remote service codes would loaded by pomelo-loader module and more details please access this [link](https://github.com/node-pomelo/pomelo-loader).\n\n+ Tags: node.js\n\n##Installation\n```\nnpm install pomelo-rpc\n```\n\n##Usage\n###Server\n``` javascript\nvar Server = require('pomelo-rpc').server;\n\n// remote service path info list\nvar paths = [\n  {namespace: 'user', path: __dirname + '/remote/test'}\n];\n\nvar port = 3333;\n\nvar server = Server.create({paths: paths, port: port});\nserver.start();\nconsole.log('rpc server started.');\n```\n\n###Client\n``` javascript\nvar Client = require('pomelo-rpc').client;\n\n// remote service interface path info list\nvar records = [\n  {namespace: 'user', serverType: 'test', path: __dirname + '/remote/test'}\n];\n\n// server info list\nvar servers = [\n  {id: 'test-server-1', serverType: 'test', host: '127.0.0.1', port: 3333}\n];\n\n// route parameter passed to route function\nvar routeParam = null;\n\n// route context passed to route function\nvar routeContext = servers;\n\n// route function to caculate the remote server id\nvar routeFunc = function(routeParam, msg, routeContext, cb) {\n  cb(null, routeContext[0].id);\n};\n\nvar client = Client.create({routeContext: routeContext, router: routeFunc});\n\nclient.start(function(err) {\n  console.log('rpc client start ok.');\n\n  client.addProxies(records);\n  client.addServers(servers);\n\n  client.proxies.user.test.service.echo(routeParam, 'hello', function(err, resp) {\n    if(err) {\n      console.error(err.stack);\n    }\n    console.log(resp);\n  });\n});\n```\n\n##Server API\n###Server.create(opts)\nCreate a RPC server instance. Intitiate the instance and acceptor with the configure.\n###Parameters\n+ opts.port - rpc server listening port.\n+ opts.paths - remote service path infos, format: [{namespace: remote service namespace, path: remote service path}, ...].\n+ opts.context - remote service context.\n+ opts.acceptorFactory(opts, msgCB) - (optional) acceptor factory method. opts.port：port that acceptor would listen，opts.services：loaded remote services，format: {namespace: {name: service}}. msgCB(msg, cb): remote request arrived callback. the method should return a acceptor instance.\n\n###server.start\nStart the remote server instance.\n\n###server.stop\nStop the remote server instance and the acceptor.\n\n###Acceptor\nImplement the low level network communication with specified protocol. Customize the protocol by passing an acceptorFactory to return different acceptors.\n\n###acceptor.listen(port)\nListen the specified port.\n\n###acceptor.close\nStop the acceptor.\n\n##Client API\n###Client.create(opts)\nCreate an RPC client instance which would generate proxies for the RPC client.\n####Parameters\n+ opts.context - context for mailbox.\n+ opts.routeContext - (optional)context for route function.\n+ opts.router(routeParam, msg, routeContext, cb) - (optional) route function which decides the RPC message should be send to which remote server. routeParam: route parameter, msg: RPC descriptioin message, routeContext: opts.routeContext.\n+ opts.mailBoxFactory(serverInfo, opts) - (optional) mail box factory method.\n\n###client.addProxies(records)\nLoad new proxy codes.\n####Parameters\n+ records - new proxy code configure information list。Format: [{namespace: service_name_space, serverType: remote_server_type, path: path_to_remote_service_interfaces}];\n\n###client.addServers(servers)\nAdd new remote server informations.\n####Parameters\n+ servers - remote server information list. Format: [{id: remote_server_id, serverType: remote_server_type, host: remote_server_host, port: remote_server_port}]\n\n###client.start(cb)\nStart the RPC client.\n\n###client.stop\nStop the RPC client and stop all the mail box connections to remote servers.\n\n###client.rpcInvoke(serverId, msg, cb)\nInvoke an RPC request.\n####Parameters\n+ serverId - remote server id.\n+ msg - RPC description message. format: {namespace: remote service namespace, serverType: remote server type, service: remote service name, method: remote service method name, args: remote service args}.\n+ cb - remote service callback function.\n\n###MailBox\nImplement the low level network communication with remote server. A mail box instance stands for a remote server. Customize the protocol by passing a mailBoxFactory parameter to client to return different mail box instances.\n\n###mailbox.connect(cb)\nConnect to the remote server.\n\n###mailbox.close\nClose mail box instance and disconnect with the remote server.\n\n###mailbox.send(msg, opts, cb)\nSend the RPC message to the associated remote server.\n####Parameters\n+ msg - RPC description message, see also clienet.rpcInvoke.\n+ opts - reserved.\n+ cb - RPC callback function.",
  "readmeFilename": "README.md"
}
