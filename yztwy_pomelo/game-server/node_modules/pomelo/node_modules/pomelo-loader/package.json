{
  "name": "pomelo-loader",
  "version": "0.0.6",
  "dependencies": {},
  "devDependencies": {
    "mocha": ">=0.0.1",
    "should": ">=0.0.1"
  },
  "contributors": [
    {
      "name": "* Yongchang Zhou",
      "email": "changchang005@gmail.com"
    }
  ],
  "readmeFilename": "README.md",
  "description": "pomelo中使用Convention over Configuration的形式管理工程目录，不同的功能按约定放在不同的目录下。pomelo-loader为pomelo提供了按目录加载模块的功能。",
  "_id": "pomelo-loader@0.0.6",
  "dist": {
    "shasum": "28c4fe17fdfada286b9d467d173c8980eb98f438",
    "size": 4830,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/pomelo-loader/download/pomelo-loader-0.0.6.tgz"
  },
  "_from": "pomelo-loader@0.0.6",
  "_npmVersion": "1.3.2",
  "_npmUser": {
    "name": "py8765",
    "email": "pengyang633@126.com"
  },
  "maintainers": [
    {
      "name": "changchang",
      "email": "changchang005@gmail.com"
    },
    {
      "name": "xieccy",
      "email": "xieccy@gmail.com"
    },
    {
      "name": "py8765",
      "email": "pengyang633@126.com"
    },
    {
      "name": "demon",
      "email": "zhang0925@126.com"
    },
    {
      "name": "fantasyni",
      "email": "fantasyni@163.com"
    }
  ],
  "directories": {},
  "publish_time": 1386915313781,
  "_cnpm_publish_time": 1386915313781,
  "_shasum": "28c4fe17fdfada286b9d467d173c8980eb98f438",
  "_resolved": "https://registry.npm.taobao.org/pomelo-loader/download/pomelo-loader-0.0.6.tgz",
  "readme": "#pomelo-loader - loader module for pomelo\n\nLoad codes for pomelo based on the convention over configuration rules.\n\npomelo-rpc could load modules in batch but not load the sub-directory recursively.\n\n+ Tags: node.js\n\n##Regulation\nModule name\n\nModule would use the filename by default. For example: load ```lib/a.js``` and the return result would be: ```{a: require('./lib/a')}```\n\nIt would use the name if the module with a name property. For example\n\n```javascript\na.js\nexports.name = 'test';\n```\nthe return result would be: ```{test: require('./lib/a')}```\n\nModule definiation\n\nIf the module exported as a function, pomelo-loader would take it as a factory method and generate a new instance of module by calling the function. And it would return the module directly for other situation.\n\n```javascript\nmodule.exports = function(context) {\n\treturn {};\t// return some module instance\n};\n```\n\n##Installation\n```\nnpm install pomelo-loader\n```\n\n##Usage\n``` javascript\nvar Loader = require('pomelo-loader');\n\nvar res = Loader.load('.');\nconsole.log('res: %j', res);\n```\n\n##API\n###Loader.load(path, context)\nLoad all modules in the path.\n####Parameters\n+ path loaded path\n+ context if the module provides a factory method, the context would be pass as a parameter as the factory method.\n"
}
