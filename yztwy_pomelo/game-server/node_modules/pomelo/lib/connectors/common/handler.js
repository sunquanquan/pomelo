var protocol = require('pomelo-protocol');
var Package = protocol.Package;
var logger = require('pomelo-logger').getLogger('pomelo', __filename);
var crypto = require('crypto');
var handlers = {};

var ST_INITED = 0;
var ST_WAIT_ACK = 1;
var ST_WORKING = 2;
var ST_CLOSED = 3;

var handleHandshake = function (socket, pkg) {
    var testFlag = 1;
    if (pkg.body != '' && pkg.body.length != 0 && testFlag == 1) {
        //console.log(pkg.body);
        var param =
        {
            alg: 'des-ede3',    //3des-ecb
            autoPad: true,
            key: '0123456789abcd0123456789',
            plaintext: pkg.body,
            iv: null
        };
        var key = new Buffer(param.key);
        var iv = new Buffer(param.iv ? param.iv : 0);
        var plaintext = param.plaintext;
        var alg = param.alg;
        var autoPad = param.autoPad;
        var decipher = crypto.createDecipheriv(alg, key, iv);
        decipher.setAutoPadding(autoPad);
        var txt = decipher.update(plaintext);
        pkg.body = Buffer.concat([txt, decipher.final()]);
       // console.log('解密');
        //console.log(pkg.body);
    }
    if (socket.state !== ST_INITED) {
        return;
    }

    try {
        socket.emit('handshake', JSON.parse(protocol.strdecode(pkg.body)));
    } catch (ex) {
        socket.emit('handshake', {});
    }
};

var handleHandshakeAck = function (socket, pkg) {

    if (socket.state !== ST_WAIT_ACK) {
        return;
    }
    socket.state = ST_WORKING;
    socket.emit('heartbeat');
};

var handleHeartbeat = function (socket, pkg) {
    if (socket.state !== ST_WORKING) {
        return;
    }
    socket.emit('heartbeat');
};

var handleData = function (socket, pkg) {
    var testFlag = 1;
    if (pkg.body != '' && pkg.body.length != 0 && testFlag == 1) {
       // console.log(pkg.body);
        var param =
        {
            alg: 'des-ede3',    //3des-ecb
            autoPad: true,
            key: '0123456789abcd0123456789',
            plaintext: pkg.body,
            iv: null
        };
        var key = new Buffer(param.key);
        var iv = new Buffer(param.iv ? param.iv : 0);
        var plaintext = param.plaintext;
        var alg = param.alg;
        var autoPad = param.autoPad;
        var decipher = crypto.createDecipheriv(alg, key, iv);
        decipher.setAutoPadding(autoPad);
        var txt = decipher.update(plaintext);
        pkg.body = Buffer.concat([txt, decipher.final()]);
       // console.log('解密1');
        //console.log(pkg);
    }

    if (socket.state !== ST_WORKING) {
        return;
    }
    socket.emit('message', pkg);
};

handlers[Package.TYPE_HANDSHAKE] = handleHandshake;
handlers[Package.TYPE_HANDSHAKE_ACK] = handleHandshakeAck;
handlers[Package.TYPE_HEARTBEAT] = handleHeartbeat;
handlers[Package.TYPE_DATA] = handleData;

var handle = function (socket, pkg) {
    //6进来
    var handler = handlers[pkg.type];
    if (!!handler) {
        handler(socket, pkg);
    } else {
        logger.error('could not find handle invalid data package.');
        socket.disconnect();
    }
};

module.exports = handle;
